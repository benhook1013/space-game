#!/usr/bin/env bash
set -euo pipefail
# Preserve original args before sourcing bootstrap script, which consumes positional params.
args=("$@")
set --
echo "[flutterw] bootstrapping Flutter SDK..."
# Ensure Flutter exists and PATH is set for this process without seeing user args.
source "$(dirname "$0")/bootstrap_flutter.sh"
echo "[flutterw] Flutter SDK ready"
# Restore original args for the actual flutter invocation.
set -- "${args[@]}"
test_concurrency=""
if [[ "${1:-}" == "test" ]]; then
  found_concurrency=false
  for ((i=1; i<=$#; i++)); do
    arg=${!i}
    if [[ $arg == --concurrency ]]; then
      found_concurrency=true
      next_index=$((i+1))
      if (( next_index <= $# )); then
        test_concurrency=${!next_index}
      fi
      break
    elif [[ $arg == --concurrency=* ]]; then
      found_concurrency=true
      test_concurrency=${arg#--concurrency=}
      break
    fi
  done
  if [[ $found_concurrency == false ]]; then
    # Determine test concurrency using env var, nproc, or sysctl; default to 1 when unknown.
    if [[ -n ${FLUTTER_TEST_CONCURRENCY:-} ]]; then
      test_concurrency="$FLUTTER_TEST_CONCURRENCY"
    else
      if command -v nproc >/dev/null 2>&1; then
        test_concurrency=$(nproc)
      elif command -v sysctl >/dev/null 2>&1; then
        test_concurrency=$(sysctl -n hw.ncpu 2>/dev/null || echo 1)
      else
        test_concurrency=1
      fi
    fi
    set -- "$@" --concurrency "$test_concurrency"
  fi
fi
echo "[flutterw] starting at $(date)"
echo "[flutterw] flutter" "$@"
if [[ "${1:-}" == "test" ]]; then
  if [[ -n "$test_concurrency" ]]; then
    echo "[flutterw] running tests with concurrency $test_concurrency..."
  else
    echo "[flutterw] running tests..."
  fi
fi
exec ".tooling/flutter/bin/flutter" "$@"
